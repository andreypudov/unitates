import 'package:flutter_test/flutter_test.dart';

import 'package:unitates/digital_storage.dart';
import 'package:unitates/digital_storage_unit.dart';

import 'src/less_precise_or_equals.dart';

void main() {
  group("should convert correctly", () {
    Map<DigitalStorage, List<double>> implementation = {
      /*                                                            bit               kbit           Kibit               Mbit                Mibit               Gbit                  Gibit               Tbit                    Tibit               Pbit                  Pibit                 B                 kB              KiB                 MB                     MiB                 GB                     GiB                 TB                     TiB                 PB                     PiB */
      DigitalStorage(1, DigitalStorageUnit.bit):      [               1,             0.001,   0.0009765625,              1e-6,  9.5367431640625e-7,              1e-9, 9.313225746154785e-10,             1e-12,   9.094947017729282e-13,             1e-15, 8.881784197001252e-16,            0.125,          0.000125, 0.0001220703125,           1.25e-7,  1.1920928955078125e-7,          1.25e-10, 1.1641532182693481e-10,          1.25e-13, 1.1368683772161603e-13,          1.25e-16, 1.1102230246251565e-16],
      DigitalStorage(1, DigitalStorageUnit.kilobit):  [            1000,                 1,      0.9765625,             0.001, 0.00095367431640625,              1e-6,  9.313225746154785e-7,              1e-9,   9.094947017729282e-10,             1e-12, 8.881784197001252e-13,              125,             0.125,    0.1220703125,          0.000125, 0.00011920928955078125,           1.25e-7,  1.1641532182693481e-7,          1.25e-10, 1.1368683772161603e-10,          1.25e-13, 1.1102230246251565e-13],
      DigitalStorage(1, DigitalStorageUnit.kibibit):  [            1024,             1.024,              1,          0.001024,        0.0009765625,          1.024e-6,    9.5367431640625e-7,          1.024e-9,   9.313225746154785e-10,         1.024e-12, 9.094947017729282e-13,              128,             0.128,           0.125,          0.000128,        0.0001220703125,           1.28e-7,  1.1920928955078125e-7,          1.28e-10, 1.1641532182693481e-10,          1.28e-13, 1.1368683772161603e-13],
      DigitalStorage(1, DigitalStorageUnit.megabit):  [            1e+6,              1000,       976.5625,                 1,    0.95367431640625,             0.001, 0.0009313225746154785,              1e-6,    9.094947017729282e-7,              1e-9, 8.881784197001252e-10,           125000,               125,     122.0703125,             0.125,    0.11920928955078125,          0.000125, 0.00011641532182693481,           1.25e-7,  1.1368683772161603e-7,          1.25e-10, 1.1102230246251565e-10],
      DigitalStorage(1, DigitalStorageUnit.mebibit):  [         1048576,          1048.576,           1024,          1.048576,                   1,       0.001048576,          0.0009765625,       1.048576e-6,      9.5367431640625e-7,       1.048576e-9, 9.313225746154785e-10,           131072,           131.072,             128,          0.131072,                  0.125,       0.000131072,        0.0001220703125,        1.31072e-7,  1.1920928955078125e-7,       1.31072e-10, 1.1641532182693481e-10],
      DigitalStorage(1, DigitalStorageUnit.gigabit):  [            1e+9,              1e+6,       976562.5,              1000,     953.67431640625,                 1,    0.9313225746154785,             0.001,   0.0009094947017729282,              1e-6,  8.881784197001252e-7,          1.25e+8,            125000,     122070.3125,               125,     119.20928955078125,             0.125,    0.11641532182693481,          0.000125, 0.00011368683772161603,           1.25e-7,  1.1102230246251565e-7],
      DigitalStorage(1, DigitalStorageUnit.gibibit):  [      1073741824,       1073741.824,        1048576,       1073.741824,                1024,       1.073741824,                     1,    0.001073741824,            0.0009765625,    1.073741824e-6,    9.5367431640625e-7,        134217728,        134217.728,          131072,        134.217728,                    128,       0.134217728,                  0.125,    0.000134217728,        0.0001220703125,     1.34217728e-7,  1.1920928955078125e-7],
      DigitalStorage(1, DigitalStorageUnit.terabit):  [           1e+12,              1e+9,    976562500.0,              1e+6,     953674.31640625,              1000,     931.3225746154785,                 1,      0.9094947017729282,             0.001, 0.0008881784197001252,         1.25e+11,           1.25e+8,     122070312.5,            125000,     119209.28955078125,               125,     116.41532182693481,             0.125,    0.11368683772161603,          0.000125, 0.00011102230246251565],
      DigitalStorage(1, DigitalStorageUnit.tebibit):  [   1099511627776,    1099511627.776,     1073741824,    1099511.627776,             1048576,    1099.511627776,                  1024,    1.099511627776,                       1, 0.001099511627776,          0.0009765625,     137438953472,  1.37438953472e+8,   1.34217728e+8,     137438.953472,                 131072,     137.438953472,                    128,    0.137438953472,                  0.125, 0.000137438953472,        0.0001220703125],
      DigitalStorage(1, DigitalStorageUnit.petabit):  [           1e+15,             1e+12,   9.765625e+11,              1e+9,     953674316.40625,              1e+6,     931322.5746154785,              1000,       909.4947017729282,                 1,    0.8881784197001252,         1.25e+14,          1.25e+11,    122070312500,           1.25e+8,     119209289.55078125,            125000,     116415.32182693481,               125,     113.68683772161603,             0.125,    0.11102230246251565],
      DigitalStorage(1, DigitalStorageUnit.pebibit):  [1125899906842624, 1125899906842.624,  1099511627776, 1125899906.842624,          1073741824, 1125899.906842624,               1048576, 1125.899906842624,                    1024, 1.125899906842624,                     1,  140737488355328,  140737488355.328,    137438953472,  140737488.355328,              134217728,  140737.488355328,                 131072,  140.737488355328,                    128, 0.140737488355328,                  0.125],
      DigitalStorage(1, DigitalStorageUnit.byte):     [               8,             0.008,      0.0078125,              8e-6,    7.62939453125e-6,              8e-9,  7.450580596923828e-9,             8e-12,   7.275957614183426e-12,             8e-15, 7.105427357601002e-15,                1,             0.001,    0.0009765625,              1e-6,     9.5367431640625e-7,              1e-9,  9.313225746154785e-10,             1e-12,  9.094947017729282e-13,             1e-15,  8.881784197001252e-16],
      DigitalStorage(1, DigitalStorageUnit.kilobyte): [            8000,                 8,         7.8125,             0.008,    0.00762939453125,              8e-6,  7.450580596923828e-6,              8e-9,    7.275957614183426e-9,             8e-12, 7.105427357601002e-12,             1000,                 1,       0.9765625,             0.001,    0.00095367431640625,              1e-6,   9.313225746154785e-7,              1e-9,  9.094947017729282e-10,             1e-12,  8.881784197001252e-13],
      DigitalStorage(1, DigitalStorageUnit.kibibyte): [            8192,             8.192,              8,          0.008192,           0.0078125,          8.192e-6,      7.62939453125e-6,          8.192e-9,    7.450580596923828e-9,         8.192e-12, 7.275957614183426e-12,             1024,             1.024,               1,          0.001024,           0.0009765625,          1.024e-6,     9.5367431640625e-7,          1.024e-9,  9.313225746154785e-10,         1.024e-12,  9.094947017729282e-13],
      DigitalStorage(1, DigitalStorageUnit.megabyte): [            8e+6,              8000,         7812.5,                 8,       7.62939453125,             0.008,  0.007450580596923828,              8e-6,    7.275957614183426e-6,              8e-9,  7.105427357601002e-9,             1e+6,              1000,        976.5625,                 1,       0.95367431640625,             0.001,  0.0009313225746154785,              1e-6,   9.094947017729282e-7,              1e-9,  8.881784197001252e-10],
      DigitalStorage(1, DigitalStorageUnit.mebibyte): [         8388608,          8388.608,           8192,          8.388608,                   8,       0.008388608,             0.0078125,       8.388608e-6,        7.62939453125e-6,       8.388608e-9,  7.450580596923828e-9,          1048576,          1048.576,            1024,          1.048576,                      1,       0.001048576,           0.0009765625,       1.048576e-6,     9.5367431640625e-7,       1.048576e-9,  9.313225746154785e-10],
      DigitalStorage(1, DigitalStorageUnit.gigabyte): [            8e+9,              8e+6,        7812500,              8000,       7629.39453125,                 8,     7.450580596923828,             0.008,    0.007275957614183426,              8e-6,  7.105427357601002e-6,             1e+9,              1e+6,        976562.5,              1000,        953.67431640625,                 1,     0.9313225746154785,             0.001,  0.0009094947017729282,              1e-6,   8.881784197001252e-7],
      DigitalStorage(1, DigitalStorageUnit.gibibyte): [      8589934592,       8589934.592,        8388608,       8589.934592,                8192,       8.589934592,                     8,    0.008589934592,               0.0078125,    8.589934592e-6,      7.62939453125e-6,       1073741824,       1073741.824,         1048576,       1073.741824,                   1024,       1.073741824,                      1,    0.001073741824,           0.0009765625,    1.073741824e-6,     9.5367431640625e-7],
      DigitalStorage(1, DigitalStorageUnit.terabyte): [           8e+12,              8e+9,      7.8125e+9,              8e+6,       7629394.53125,              8000,     7450.580596923828,                 8,       7.275957614183426,             0.008,  0.007105427357601002,            1e+12,              1e+9,       976562500,              1e+6,        953674.31640625,              1000,      931.3225746154785,                 1,     0.9094947017729282,             0.001,  0.0008881784197001252],
      DigitalStorage(1, DigitalStorageUnit.tebibyte): [   8796093022208,    8796093022.208, 8.589934592e+9,    8796093.022208,             8388608,    8796.093022208,                  8192,    8.796093022208,                       8, 0.008796093022208,             0.0078125,    1099511627776,    1099511627.776,      1073741824,    1099511.627776,                1048576,    1099.511627776,                   1024,    1.099511627776,                      1, 0.001099511627776,           0.0009765625],
      DigitalStorage(1, DigitalStorageUnit.petabyte): [           8e+15,             8e+12,     7.8125e+12,              8e+9,       7629394531.25,              8e+6,     7450580.596923828,              8000,       7275.957614183426,                 8,     7.105427357601002,            1e+15,             1e+12,    9.765625e+11,              1e+9,        953674316.40625,              1e+6,      931322.5746154785,              1000,      909.4947017729282,                 1,     0.8881784197001252],
      DigitalStorage(1, DigitalStorageUnit.pebibyte): [9007199254740992, 9007199254740.992,  8796093022208, 9007199254.740992,          8589934592, 9007199.254740993,               8388608, 9007.199254740992,                    8192, 9.007199254740993,                     8, 1125899906842624, 1125899906842.624,   1099511627776, 1125899906.842624,             1073741824, 1125899.906842624,                1048576, 1125.899906842624,                   1024, 1.125899906842624,                      1],
    };

    Map<DigitalStorage, List<double>> requirements = {
      /*                                                            bit               kbit           Kibit               Mbit                Mibit               Gbit                  Gibit               Tbit                    Tibit               Pbit                  Pibit                 B                 kB              KiB                 MB                     MiB                 GB                     GiB                 TB                     TiB                 PB                     PiB */
      DigitalStorage(1, DigitalStorageUnit.bit):      [               1,             0.001,    0.000976563,              1e-6,           9.5367e-7,              1e-9,            9.3132e-10,             1e-12,              9.0949e-13,             1e-15,            8.8818e-16,            0.125,          0.000125,      0.00012207,           1.25e-7,              1.1921e-7,          1.25e-10,             1.1642e-10,          1.25e-13,             1.1369e-13,          1.25e-16,             1.1102e-16],
      DigitalStorage(1, DigitalStorageUnit.kilobit):  [            1000,                 1,       0.976563,             0.001,         0.000953674,              1e-6,             9.3132e-7,              1e-9,              9.0949e-10,             1e-12,            8.8818e-13,              125,             0.125,         0.12207,          0.000125,            0.000119209,           1.25e-7,              1.1642e-7,          1.25e-10,             1.1369e-10,          1.25e-13,             1.1102e-13],
      DigitalStorage(1, DigitalStorageUnit.kibibit):  [            1024,             1.024,              1,          0.001024,         0.000976563,          1.024e-6,             9.5367e-7,          1.024e-9,              9.3132e-10,         1.024e-12,            9.0949e-13,              128,             0.128,           0.125,          0.000128,             0.00012207,           1.28e-7,              1.1921e-7,          1.28e-10,             1.1642e-10,          1.28e-13,             1.1369e-13],
      DigitalStorage(1, DigitalStorageUnit.megabit):  [            1e+6,              1000,        976.563,                 1,            0.953674,             0.001,           0.000931323,              1e-6,               9.0949e-7,              1e-9,            8.8818e-10,           125000,               125,          122.07,             0.125,               0.119209,          0.000125,            0.000116415,           1.25e-7,              1.1369e-7,          1.25e-10,             1.1102e-10],
      DigitalStorage(1, DigitalStorageUnit.mebibit):  [        1.049e+6,           1048.58,           1024,           1.04858,                   1,        0.00104858,           0.000976563,         1.0486e-6,               9.5367e-7,         1.0486e-9,            9.3132e-10,           131072,           131.072,             128,          0.131072,                  0.125,       0.000131072,             0.00012207,         1.3107e-7,              1.1921e-7,        1.3107e-10,             1.1642e-10],
      DigitalStorage(1, DigitalStorageUnit.gigabit):  [            1e+9,              1e+6,         976563,              1000,             953.674,                 1,              0.931323,             0.001,             0.000909495,              1e-6,             8.8818e-7,          1.25e+8,            125000,          122070,               125,                119.209,             0.125,               0.116415,          0.000125,            0.000113687,           1.25e-7,              1.1102e-7],
      DigitalStorage(1, DigitalStorageUnit.gibibit):  [        1.074e+9,          1.074e+6,       1.049e+6,           1073.74,                1024,           1.07374,                     1,        0.00107374,             0.000976563,         1.0737e-6,             9.5367e-7,         1.342e+8,            134218,          131072,           134.218,                    128,          0.134218,                  0.125,       0.000134218,             0.00012207,         1.3422e-7,              1.1921e-7],
      DigitalStorage(1, DigitalStorageUnit.terabit):  [           1e+12,              1e+9,       9.766e+8,              1e+6,              953674,              1000,               931.323,                 1,                0.909495,             0.001,           0.000888178,         1.25e+11,           1.25e+8,        1.221e+8,            125000,                 119209,               125,                116.415,             0.125,               0.113687,          0.000125,            0.000111022],
      DigitalStorage(1, DigitalStorageUnit.tebibit):  [         1.1e+12,            1.1e+9,       1.074e+9,            1.1e+6,            1.049e+6,           1099.51,                  1024,           1.09951,                       1,        0.00109951,           0.000976563,        1.374e+11,          1.374e+8,        1.342e+8,            137439,                 131072,           137.439,                    128,          0.137439,                  0.125,       0.000137439,             0.00012207],
      DigitalStorage(1, DigitalStorageUnit.petabit):  [           1e+15,             1e+12,      9.766e+11,              1e+9,            9.537e+8,              1e+6,                931323,              1000,                 909.495,                 1,              0.888178,         1.25e+14,          1.25e+11,       1.221e+11,           1.25e+8,               1.192e+8,            125000,                 116415,               125,                113.687,             0.125,               0.111022],
      DigitalStorage(1, DigitalStorageUnit.pebibit):  [       1.126e+15,         1.126e+12,        1.1e+12,          1.126e+9,            1.074e+9,          1.126e+6,              1.049e+6,            1125.9,                    1024,            1.1259,                     1,        1.407e+14,         1.407e+11,       1.374e+11,          1.407e+8,               1.342e+8,            140737,                 131072,           140.737,                    128,          0.140737,                  0.125],
      DigitalStorage(1, DigitalStorageUnit.byte):     [               8,             0.008,      0.0078125,              8e-6,           7.6294e-6,              8e-9,             7.4506e-9,             8e-12,               7.276e-12,             8e-15,            7.1054e-15,                1,             0.001,     0.000976563,              1e-6,              9.5367e-7,              1e-9,             9.3132e-10,             1e-12,             9.0949e-13,             1e-15,             8.8818e-16],
      DigitalStorage(1, DigitalStorageUnit.kilobyte): [            8000,                 8,         7.8125,             0.008,          0.00762939,              8e-6,             7.4506e-6,              8e-9,                7.276e-9,             8e-12,            7.1054e-12,             1000,                 1,        0.976563,             0.001,            0.000953674,              1e-6,              9.3132e-7,              1e-9,             9.0949e-10,             1e-12,             8.8818e-13],
      DigitalStorage(1, DigitalStorageUnit.kibibyte): [            8192,             8.192,              8,          0.008192,           0.0078125,          8.192e-6,             7.6294e-6,          8.192e-9,               7.4506e-9,         8.192e-12,             7.276e-12,             1024,             1.024,               1,          0.001024,            0.000976563,          1.024e-6,              9.5367e-7,          1.024e-9,             9.3132e-10,         1.024e-12,             9.0949e-13],
      DigitalStorage(1, DigitalStorageUnit.megabyte): [            8e+6,              8000,         7812.5,                 8,             7.62939,             0.008,            0.00745058,              8e-6,                7.276e-6,              8e-9,             7.1054e-9,             1e+6,              1000,         976.563,                 1,               0.953674,             0.001,            0.000931323,              1e-6,              9.0949e-7,              1e-9,             8.8818e-10],
      DigitalStorage(1, DigitalStorageUnit.mebibyte): [        8.389e+6,           8388.61,           8192,           8.38861,                   8,        0.00838861,             0.0078125,         8.3886e-6,               7.6294e-6,         8.3886e-9,             7.4506e-9,         1.049e+6,           1048.58,            1024,           1.04858,                      1,        0.00104858,            0.000976563,         1.0486e-6,              9.5367e-7,         1.0486e-9,             9.3132e-10],
      DigitalStorage(1, DigitalStorageUnit.gigabyte): [            8e+9,              8e+6,       7.813e+6,              8000,             7629.39,                 8,               7.45058,             0.008,              0.00727596,              8e-6,             7.1054e-6,             1e+9,              1e+6,          976563,              1000,                953.674,                 1,               0.931323,             0.001,            0.000909495,              1e-6,              8.8818e-7],
      DigitalStorage(1, DigitalStorageUnit.gibibyte): [         8.59e+9,           8.59e+6,       8.389e+6,           8589.93,                8192,           8.58993,                     8,        0.00858993,               0.0078125,         8.5899e-6,             7.6294e-6,         1.074e+9,          1.074e+6,        1.049e+6,           1073.74,                   1024,           1.07374,                      1,        0.00107374,            0.000976563,         1.0737e-6,              9.5367e-7],
      DigitalStorage(1, DigitalStorageUnit.terabyte): [           8e+12,              8e+9,       7.813e+9,              8e+6,            7.629e+6,              8000,               7450.58,                 8,                 7.27596,             0.008,            0.00710543,            1e+12,              1e+9,        9.766e+8,              1e+6,                 953674,              1000,                931.323,                 1,               0.909495,             0.001,            0.000888178],
      DigitalStorage(1, DigitalStorageUnit.tebibyte): [       8.796e+12,          8.796e+9,        8.59e+9,          8.796e+6,            8.389e+6,           8796.09,                  8192,           8.79609,                       8,        0.00879609,             0.0078125,          1.1e+12,            1.1e+9,        1.074e+9,            1.1e+6,               1.049e+6,           1099.51,                   1024,           1.09951,                      1,        0.00109951,            0.000976563],
      DigitalStorage(1, DigitalStorageUnit.petabyte): [           8e+15,             8e+12,      7.813e+12,              8e+9,            7.629e+9,              8e+6,              7.451e+6,              8000,                 7275.96,                 8,               7.10543,            1e+15,             1e+12,       9.766e+11,              1e+9,               9.537e+8,              1e+6,                 931323,              1000,                909.495,                 1,               0.888178],
      DigitalStorage(1, DigitalStorageUnit.pebibyte): [       9.007e+15,         9.007e+12,      8.796e+12,          9.007e+9,             8.59e+9,          9.007e+6,              8.389e+6,            9007.2,                    8192,            9.0072,                     8,        1.126e+15,         1.126e+12,         1.1e+12,          1.126e+9,               1.074e+9,          1.126e+6,               1.049e+6,            1125.9,                   1024,            1.1259,                      1],
    };

    test("should cover supported units", () {
      expect(DigitalStorageUnit.values.length, implementation.values.first.length);
      expect(DigitalStorageUnit.values.length, requirements.values.first.length);
    });

    implementation.forEach((actual, expected) {
      test("$actual should convert exactly", () {
        expect(actual.to(DigitalStorageUnit.bit).value, expected[0]);
        expect(actual.to(DigitalStorageUnit.kilobit).value, expected[1]);
        expect(actual.to(DigitalStorageUnit.kibibit).value, expected[2]);
        expect(actual.to(DigitalStorageUnit.megabit).value, expected[3]);
        expect(actual.to(DigitalStorageUnit.mebibit).value, expected[4]);
        expect(actual.to(DigitalStorageUnit.gigabit).value, expected[5]);
        expect(actual.to(DigitalStorageUnit.gibibit).value, expected[6]);
        expect(actual.to(DigitalStorageUnit.terabit).value, expected[7]);
        expect(actual.to(DigitalStorageUnit.tebibit).value, expected[8]);
        expect(actual.to(DigitalStorageUnit.petabit).value, expected[9]);
        expect(actual.to(DigitalStorageUnit.pebibit).value, expected[10]);
        expect(actual.to(DigitalStorageUnit.byte).value, expected[11]);
        expect(actual.to(DigitalStorageUnit.kilobyte).value, expected[12]);
        expect(actual.to(DigitalStorageUnit.kibibyte).value, expected[13]);
        expect(actual.to(DigitalStorageUnit.megabyte).value, expected[14]);
        expect(actual.to(DigitalStorageUnit.mebibyte).value, expected[15]);
        expect(actual.to(DigitalStorageUnit.gigabyte).value, expected[16]);
        expect(actual.to(DigitalStorageUnit.gibibyte).value, expected[17]);
        expect(actual.to(DigitalStorageUnit.terabyte).value, expected[18]);
        expect(actual.to(DigitalStorageUnit.tebibyte).value, expected[19]);
        expect(actual.to(DigitalStorageUnit.petabyte).value, expected[20]);
        expect(actual.to(DigitalStorageUnit.pebibyte).value, expected[21]);
      });
    });

    requirements.forEach((actual, expected) {
      test("$actual should convert closely", () {
        expect(actual.to(DigitalStorageUnit.bit).value, lessPreciseOrEquals(expected[0]));
        expect(actual.to(DigitalStorageUnit.kilobit).value, lessPreciseOrEquals(expected[1]));
        expect(actual.to(DigitalStorageUnit.kibibit).value, lessPreciseOrEquals(expected[2]));
        expect(actual.to(DigitalStorageUnit.megabit).value, lessPreciseOrEquals(expected[3]));
        expect(actual.to(DigitalStorageUnit.mebibit).value, lessPreciseOrEquals(expected[4]));
        expect(actual.to(DigitalStorageUnit.gigabit).value, lessPreciseOrEquals(expected[5]));
        expect(actual.to(DigitalStorageUnit.gibibit).value, lessPreciseOrEquals(expected[6]));
        expect(actual.to(DigitalStorageUnit.terabit).value, lessPreciseOrEquals(expected[7]));
        expect(actual.to(DigitalStorageUnit.tebibit).value, lessPreciseOrEquals(expected[8]));
        expect(actual.to(DigitalStorageUnit.petabit).value, lessPreciseOrEquals(expected[9]));
        expect(actual.to(DigitalStorageUnit.pebibit).value, lessPreciseOrEquals(expected[10]));
        expect(actual.to(DigitalStorageUnit.byte).value, lessPreciseOrEquals(expected[11]));
        expect(actual.to(DigitalStorageUnit.kilobyte).value, lessPreciseOrEquals(expected[12]));
        expect(actual.to(DigitalStorageUnit.kibibyte).value, lessPreciseOrEquals(expected[13]));
        expect(actual.to(DigitalStorageUnit.megabyte).value, lessPreciseOrEquals(expected[14]));
        expect(actual.to(DigitalStorageUnit.mebibyte).value, lessPreciseOrEquals(expected[15]));
        expect(actual.to(DigitalStorageUnit.gigabyte).value, lessPreciseOrEquals(expected[16]));
        expect(actual.to(DigitalStorageUnit.gibibyte).value, lessPreciseOrEquals(expected[17]));
        expect(actual.to(DigitalStorageUnit.terabyte).value, lessPreciseOrEquals(expected[18]));
        expect(actual.to(DigitalStorageUnit.tebibyte).value, lessPreciseOrEquals(expected[19]));
        expect(actual.to(DigitalStorageUnit.petabyte).value, lessPreciseOrEquals(expected[20]));
        expect(actual.to(DigitalStorageUnit.pebibyte).value, lessPreciseOrEquals(expected[21]));
      });
    });

    test("should use standard symbols", () {
      expect(DigitalStorage(1, DigitalStorageUnit.bit).toString(), "1.0 bit");
      expect(DigitalStorage(1, DigitalStorageUnit.kilobit).toString(), "1.0 kbit");
      expect(DigitalStorage(1, DigitalStorageUnit.kibibit).toString(), "1.0 Kibit");
      expect(DigitalStorage(1, DigitalStorageUnit.megabit).toString(), "1.0 Mbit");
      expect(DigitalStorage(1, DigitalStorageUnit.mebibit).toString(), "1.0 Mibit");
      expect(DigitalStorage(1, DigitalStorageUnit.gigabit).toString(), "1.0 Gbit");
      expect(DigitalStorage(1, DigitalStorageUnit.gibibit).toString(), "1.0 Gibit");
      expect(DigitalStorage(1, DigitalStorageUnit.terabit).toString(), "1.0 Tbit");
      expect(DigitalStorage(1, DigitalStorageUnit.tebibit).toString(), "1.0 Tibit");
      expect(DigitalStorage(1, DigitalStorageUnit.petabit).toString(), "1.0 Pbit");
      expect(DigitalStorage(1, DigitalStorageUnit.pebibit).toString(), "1.0 Pibit");
      expect(DigitalStorage(1, DigitalStorageUnit.byte).toString(), "1.0 B");
      expect(DigitalStorage(1, DigitalStorageUnit.kilobyte).toString(), "1.0 kB");
      expect(DigitalStorage(1, DigitalStorageUnit.kibibyte).toString(), "1.0 KiB");
      expect(DigitalStorage(1, DigitalStorageUnit.megabyte).toString(), "1.0 MB");
      expect(DigitalStorage(1, DigitalStorageUnit.mebibyte).toString(), "1.0 MiB");
      expect(DigitalStorage(1, DigitalStorageUnit.gigabyte).toString(), "1.0 GB");
      expect(DigitalStorage(1, DigitalStorageUnit.gibibyte).toString(), "1.0 GiB");
      expect(DigitalStorage(1, DigitalStorageUnit.terabyte).toString(), "1.0 TB");
      expect(DigitalStorage(1, DigitalStorageUnit.tebibyte).toString(), "1.0 TiB");
      expect(DigitalStorage(1, DigitalStorageUnit.petabyte).toString(), "1.0 PB");
      expect(DigitalStorage(1, DigitalStorageUnit.pebibyte).toString(), "1.0 PiB");
    });
  });
}
